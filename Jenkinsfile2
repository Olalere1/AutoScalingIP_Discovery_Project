#Hardcode slack channel name (instead of using variable - $SLACK_CHANNEL) with specific channel to be used, if slack notification fails in pipeline build

pipeline{
    agent {
        label "jenkins-node"
    }
    environment {
        NEXUS_USER = credentials('nexus-username')
        NEXUS_PASSWORD = credentials('nexus-password')
        NEXUS_REPO = credentials('nexus-repo')
        NVDKEY  = credentials('nvd-key')
        ANSIBLE_IP  = credentials('ansible-ip')
        SLACK_CHANNEL = credentials('slack-channel')          # newly added by me - Olalere
    }
    stages {
        stage('Build Artifact') {
            steps {
                sh 'mvn clean package -DskipTests -Dcheckstyle.skip'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $NEXUS_REPO/petclinicapps .'
            }
        }

        stage('Push Artifact to Nexus Repo') {
            steps {
                nexusArtifactUploader artifacts: [[artifactId: 'spring-petclinic',
                classifier: '',
                file: 'target/spring-petclinic-2.4.2.war',
                type: 'war']],
                credentialsId: 'nexus-cred',
                groupId: 'Petclinic',
                nexusUrl: 'nexus.aquinas.site',
                nexusVersion: 'nexus3',
                protocol: 'https',
                repository: 'nexus-repo',
                version: '1.0'
            }
        }
        stage('Trivy fs Scan') {
            steps {
                sh "trivy fs . > trivyfs.json"
            }
        }

        stage('Log Into Nexus Docker Repo') {
            steps {
                sh 'docker login --username $NEXUS_USER --password $NEXUS_PASSWORD $NEXUS_REPO'
            }
        }
        stage('Push to Nexus Docker Repo') {
            steps {
                sh 'docker push $NEXUS_REPO/petclinicapps'
            }
        }
        stage('Trivy image Scan') {
            steps {
                sh "trivy image $NEXUS_REPO/petclinicapps > trivyfs_image.json"
            }
        }
        stage('Trivy report slack notification') {
            steps {
                slackSend channel: '$SLACK_CHANNEL', message: 'Image Security Scan report generated and waiting for review before approval ', teamDomain: 'Cloudhight', tokenCredentialId: 'slack-cred'
            }
        }
        stage('Security cleared Approval (trivy)') {
            steps {
                timeout(activity: true, time: 10) {
                    input message: 'Needs Approval ', submitter: 'admin'
                }
            }
        }
        stage('Deploy to stage') {
            steps {
                sshagent(['ssh-cred']) {       // changed from ssh-node
                    sh 'ssh -t -t ec2-user@$ANSIBLE_IP -o strictHostKeyChecking=no "ansible-playbook -i /etc/ansible/stage-hosts /etc/ansible/stage-playbook.yml"'
                }
            }
        }
        stage('check stage website availability') {
            steps {
              script {
                  slackSend(
                    channel: '$SLACK_CHANNEL',
                    message: 'Starting deployment to stage environment...',
                    tokenCredentialId: 'slack-cred',
                    color: '#FFFF00' // Yellow for ongoing process
                  )
                }
                 sh "sleep 90"
                 sh "curl -s -o /dev/null -w \"%{http_code}\" https://stage.aquinas.site"
                script {
                    def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" https://stage.aquinas.site", returnStdout: true).trim()
                    if (response == "200") {
                        slackSend(color: 'good', message: "Deployment to stage environment is completed successfuly...The prod enterprise java application is up and running with HTTP status code ${response}.", tokenCredentialId: 'slack-cred')
                    } else {
                        slackSend(color: 'danger', message: "Deployment to production environment is completed successfuly but the prod petclinic java application appears to be down with HTTP status code ${response}.", tokenCredentialId: 'slack-cred')
                    }
                }
            }
        }
        stage('ZAP') {
            steps {
                  catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                  script {
                    slackSend(
                      channel: '$SLACK_CHANNEL',
                      message: 'Starting Dynamic application security test...',
                      tokenCredentialId: 'slack-cred',
                      color: '#FFFF00' // Yellow for ongoing process
                    )
                  }
                  sh '''
                    chmod 777 $(pwd)
                    docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://stage.aquinas.site -g gen.conf -r testreport.html
                  '''
                  script {
                    slackSend(
                      channel: '$SLACK_CHANNEL',
                      message: 'Dynamic application security test completed successfully.',
                      tokenCredentialId: 'slack-cred',
                      color: '#FFFF00' // Yellow for ongoing process
                    )
                  }
                }
            }
        }
        stage('Request for Approval') {
            steps {
              script {
                  slackSend(
                    channel: '$SLACK_CHANNEL',
                    message: 'Waiting for Approval for prod deployment',
                    tokenCredentialId: 'slack-cred',
                    color: '#FFFF00' // Yellow for ongoing process
                  )
                }
                timeout(activity: true, time: 10) {
                    input message: 'Needs Approval ', submitter: 'admin'
                }
            }
        }
        stage('Deploy to prod') {
            steps {
                sshagent(['ssh-cred']) {        // changed from ssh-node
                    sh 'ssh -t -t ec2-user@$ANSIBLE_IP -o strictHostKeyChecking=no "ansible-playbook -i /etc/ansible/prod-hosts /etc/ansible/prod-playbook.yml"'
                }
            }
        }
        stage('check prod website availability') {
            steps {
                script {
                  slackSend(
                    channel: '$SLACK_CHANNEL',
                    message: 'Starting deployment to production environment...',
                    tokenCredentialId: 'slack-cred',
                    color: '#FFFF00' // Yellow for ongoing process
                  )
                }
                 sh "sleep 90"
                 sh "curl -s -o /dev/null -w \"%{http_code}\" https://prod.aquinas.site"
                script {
                    def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" https://aquinas.site", returnStdout: true).trim()
                    if (response == "200") {
                        slackSend(color: 'good', message: "Deployment to production environment is completed successfuly...The prod enterprise java application is up and running with HTTP status code ${response}.", tokenCredentialId: 'slack-cred')
                    } else {
                        slackSend(color: 'danger', message: "Deployment to production environment is completed successfuly but the prod petclinic java application appears to be down with HTTP status code ${response}.", tokenCredentialId: 'slack-cred')
                    }
                }
            }
        }
      }
      post {
          failure {
              script {
                  slackSend(
                    channel: '$SLACK_CHANNEL',
                    message: "Pipeline failed during on job 2",
                    tokenCredentialId: 'slack-cred',
                    color: '#FF0000' // Red for failure
                  )
              }
          }
          success {
              script {
                  slackSend(
                    channel: '$SLACK_CHANNEL',
                    message: "Job2 pipeline executed successfully on Jenkins Node Slave",
                    tokenCredentialId: 'slack-cred',
                    color: '#36A64F' // Green for success
                  )
              }
          }
      }
}
  